Representing a sparse matrix by a 2D array leads to wastage of lots of memory as zeroes in the
matrix are of no use in most of the cases. So, instead of storing zeroes with non-zero elements,
we only store non-zero elements. This means storing non-zero elements with triples- (Row,
Column, value).
Sparse Matrix Representations can be done in many ways following are two common
representations:
Array representation
Linked list representation
Method 1: Using Arrays:
2D array is used to represent a sparse matrix in which there are three rows named as
Row: Index of row, where non-zero element is located
Column: Index of column, where non-zero element is located
Value: Value of the non zero element located at index â€“ (row,column)
// C++ program for Sparse Matrix Representation
// using Array
#include <iostream
using namespace std;
int main()
{
 // Assume 4x5 sparse matrix
 int sparseMatrix[4][5] =
 {
 {0 , 0 , 3 , 0 , 4 },
 {0 , 0 , 5 , 7 , 0 },
 {0 , 0 , 0 , 0 , 0 },
 {0 , 2 , 6 , 0 , 0 }
 };
 int size = 0;
 for (int i = 0; i < 4; i++)
 for (int j = 0; j < 5; j++)
 if (sparseMatrix[i][j] != 0)
 size++;
 // number of columns in compactMatrix (size) must be
 // equal to number of non - zero elements in// sparseMatrix
 int compactMatrix[3][size];
 // Making of new matrix
 int k = 0;
 for (int i = 0; i < 4; i++)
 for (int j = 0; j < 5; j++)
 if (sparseMatrix[i][j] != 0)
 {
 compactMatrix[0][k] = i;
 compactMatrix[1][k] = j;
 compactMatrix[2][k] = sparseMatrix[i][j];
 k++;
 } 
 for (int i=0; i<3; i++)
 {
 for (int j=0; j<size; j++)
 cout <<" "<< compactMatrix[i][j];
 cout <<"\n";
 return 0;
}